# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on: 
  workflow_dispatch:
    inputs:
      Artifact:
        description: 'The environment to deploy to'
        required: true
        type: choice
        options:
          - Dev
          - QA
          - Prod
  #push:
   # branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

jobs:
  Build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    #- name: Update dependency graph
    #  uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
  
  Test:
    name: Run Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: [Build]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      #- name: Build and Run Tests
        #run: mvn test --batch-mode --fail-at-end
      - run: mvn -B package --file pom.xml -DskipTests 
      - run: mvn install -DskipTests
      - run: mvn clean test --batch-mode -Dmaven.test.failure.ignore=true
  Publish-job:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: [Test]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - run: mvn --batch-mode --update-snapshots verify
    - run: mkdir staging && cp target/*.jar staging
    - uses: actions/upload-artifact@v3
      with:
        name: Package
        path: staging
        
  Artifact:
      #if: github.event.inputs.Artifact == 'true'  
      runs-on: ubuntu-latest
      permissions:
        contents: read
        packages: write
      needs: [Publish-job]
      steps:
        - uses: actions/checkout@v3
        - uses: actions/setup-java@v1
          with:
            java-version: 17
        - run: mvn -B package --file pom.xml -DskipTests
        - uses: josStorer/get-current-time@v2
          id: current-time
          with:
            format: YYYYMMDD
            utcOffset: "+08:00"
        - name: Use current time    
          env:
              #TIME: "${{ steps.current-time.outputs.time }}"
              #R_TIME: "${{ steps.current-time.outputs.readableTime }}"
              F_TIME: "${{ steps.current-time.outputs.formattedTime }}"
              YEAR: "${{ steps.current-time.outputs.year }}"
              DAY: "${{ steps.current-time.outputs.day }}"
          #run: echo $TIME $R_TIME $F_TIME $YEAR $DAY
          run: echo $F_TIME $YEAR $DAY
        - run: mkdir staging && cp target/*jar-with-dependencies.jar staging
        - uses: actions/upload-artifact@v1
          with:
            name: Package-${{ steps.current-time.outputs.formattedTime }}
            path: staging       
        - name: Publish Test Report
          uses: mikepenz/action-junit-report@v3
          if: always() # always run even if the previous step fails
          with:
            report_paths: '**/surefire-reports/TEST-*.xml' 
        
       
        #- name: Login to DockerHub
        #  uses: docker/login-action@v1
        # with:
         #   username: ${{ secrets.DOCKERHUB_USERNAME }}
          #  password: ${{ secrets.DOCKERHUB_TOKEN }}
        - name: Docker build
          run: |
            #docker build -t hegdeshashi/agility:test -f Dockerfile .
            docker build -t hegdeshashi/agility:${{ github.event.inputs.Artifact }}-${{ steps.current-time.outputs.formattedTime }} -f Dockerfile .
        - name: Login to DockerHub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
        - name: Docker push
          run: |
            docker push hegdeshashi/agility:${{ github.event.inputs.Artifact }}-${{ steps.current-time.outputs.formattedTime }}
  
  SonarCloud-scan:
    #if: github.event.inputs.SonarCloud-scan == 'true' && (needs.Artifact.result == 'success' || needs.Artifact.result == 'skipped') && (needs.SAST-Snyk.result == 'success' || needs.SAST-Snyk.result == 'skipped') && (needs.Test.result == 'success' || needs.Test.result == 'skipped') && (needs.SAST-Snyk.result == 'success' || needs.SAST-Snyk.result == 'skipped')
    runs-on: ubuntu-latest
    needs: [Artifact]
    steps:
    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarCloud-Scan
      #uses: sonarsource/sonarcloud-github-action@master
      run:  mvn install -DskipTests sonar:sonar -Dsonar.projectKey=hegdeshashi_github-action-java -Dsonar.organization=gh-action-java -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN
      env:
        GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
  SAST-Snyk:
    runs-on: ubuntu-latest
    permissions:
        contents: write
        packages: write
    needs: [Artifact]
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif 
